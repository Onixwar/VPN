# /opt/telegram_wireguard/utils.py
import os
import time
import aiosqlite
from config import CONFIG
from telebot import types, asyncio_filters
import emoji as e
from datetime import datetime
from typing import List
from payment import getCostBySale   

# –ë–∞–∑–æ–≤—ã–µ —Å–∫–∏–¥–∫–∏ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–º–µ—Å—è—Ü—ã -> %)
_BASE_DISCOUNT = {1: 0, 3: 5, 6: 10, 12: 15}

def find_config_path(tgid: int, index: int = 1) -> str | None:
    """Search for WireGuard config path for a user."""
    nic = CONFIG.get("SERVER_WG_NIC", "wg0")
    new_path = f"/root/{nic}-client-{tgid}-{index}.conf"
    if os.path.exists(new_path) and os.path.getsize(new_path) > 0:
        return new_path
    if index == 1:
        old_path = f"/root/{nic}-client-{tgid}.conf"
        if os.path.exists(old_path) and os.path.getsize(old_path) > 0:
            return old_path
    return None


async def is_user_subscribed(bot, user_id: int) -> bool:
    """Check if user subscribed to promo channel."""
    channel = CONFIG.get("promo_channel")
    if not channel:
        return False
    try:
        member = await bot.get_chat_member(channel, user_id)
        return member.status in ("member", "creator", "administrator")
    except Exception:
        return False


async def get_user_promo_percent(tgid: int) -> int:
    """Return promo percent for user if promo code active."""
    async with aiosqlite.connect(CONFIG["DATABASE_NAME"]) as db:
        c = await db.execute("SELECT active_promocode FROM userss WHERE tgid=?", (tgid,))
        row = await c.fetchone()
        if not row or not row[0]:
            return 0
        code = row[0]
        c = await db.execute(
            "SELECT discount_percent, active, expires_at, max_uses, used_count "
            "FROM promocodes WHERE code=?",
            (code,),
        )
        promo = await c.fetchone()
        if not promo:
            return 0
        now = int(time.time())
        if not promo[1]:
            return 0
        if promo[2] and promo[2] < now:
            return 0
        if promo[3] and promo[4] >= promo[3]:
            return 0
        return promo[0] or 0


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#  –ò –ó –ú –ï –ù –Å –ù –ù –ê –Ø   –§ –£ –ù –ö –¶ –ò –Ø
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def apply_promocode_to_user(
    tgid: int, code: str
) -> tuple[bool, int, str]:
    """
    –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Returns:
        ok                ‚Äì True, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–ª–∏
        discount_percent  ‚Äì –≤–µ–ª–∏—á–∏–Ω–∞ —Å–∫–∏–¥–∫–∏ –∏–ª–∏ 0
        reason            ‚Äì –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏ / 'OK' –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
    """
    async with aiosqlite.connect(CONFIG["DATABASE_NAME"]) as db:
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–∞–º –ø—Ä–æ–º–æ–∫–æ–¥
        c = await db.execute(
            "SELECT discount_percent, active, expires_at, max_uses, used_count "
            "FROM promocodes WHERE code=?",
            (code,),
        )
        promo = await c.fetchone()
        if not promo:
            return False, 0, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"

        discount, active, expires_at, max_uses, used_count = promo
        now = int(time.time())

        if not active:
            return False, 0, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
        if expires_at and expires_at < now:
            return False, 0, "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫"
        if max_uses and used_count >= max_uses:
            return False, 0, "–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω"

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        c = await db.execute(
            "SELECT active_promocode FROM userss WHERE tgid=?", (tgid,)
        )
        row = await c.fetchone()
        if row and row[0]:
            return False, 0, "–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥"

        # 3. –ü—Ä–∏–º–µ–Ω—è–µ–º: –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
        await db.execute(
            "UPDATE userss SET active_promocode=? WHERE tgid=?", (code, tgid)
        )
        await db.execute(
            "UPDATE promocodes SET used_count = used_count + 1 WHERE code=?",
            (code,),
        )
        await db.commit()

        return True, discount, "OK"


def effective_discount(months: int, promo: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–µ:
    –±–µ—Ä–µ–º max(–±–∞–∑–æ–≤–∞—è_—Å–∫–∏–¥–∫–∞, promo) ‚Äî –±–µ–∑ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    return max(_BASE_DISCOUNT.get(months, 0), promo)

def make_tariff_keyboard(
    promo_percent: int,
    show_one_device: bool = True,
    show_two_device: bool = True
) -> types.InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–∞—Ä–∏—Ñ–æ–≤,
    —É—á–∏—Ç—ã–≤–∞—è –∫–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ –ø—Ä–æ–º–æ-—Å–∫–∏–¥–∫—É.
    """
    kb = types.InlineKeyboardMarkup(row_width=1)
    months_list: List[int] = [1, 3, 6, 12]

    # helper-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    def _add(device_cnt: int):
        for m in months_list:
            price = getCostBySale(m, device_cnt, promo_percent)  # —É–∂–µ –µ—Å—Ç—å –≤ —Ç–≤–æ—ë–º –∫–æ–¥–µ
            disc = effective_discount(m, promo_percent)
            disc_txt = f" (-{disc}%)" if disc else ""
            icon = "üì±" if device_cnt == 1 else "üì±üíª"
            kb.add(
                types.InlineKeyboardButton(
                    e.emojize(f"{icon} {device_cnt} —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ{'–∞' if device_cnt==2 else ''} - "
                              f"{m} –º–µ—Å. {price} —Ä—É–±.{disc_txt}"),
                    callback_data=f"SelectPlan:{m}:{device_cnt}"
                )
            )

    if show_one_device:
        _add(1)
    if show_two_device:
        _add(2)

    # –æ–±—â–∞—è –∫–Ω–æ–ø–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    kb.add(types.InlineKeyboardButton(e.emojize("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ +1 –Ω–µ–¥–µ–ª—è –∑–∞ –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞"),
                                      callback_data="Referrer"))
    return kb
